JSonny - json controlled uitableviewcontroller
---

[![](http://farm8.staticflickr.com/7159/6788565653_6163433af6.jpg)](http://www.flickr.com/photos/71088131@N07/6788565653/)
[![](http://farm8.staticflickr.com/7146/6788559637_02187c8dc1.jpg)](http://www.flickr.com/photos/71088131@N07/6788559637/)

## Installation ##

* JSonny uses SBJson(https://github.com/stig/json-framework/) to parse json strings into objects, so download it from https://github.com/stig/json-framework/ and put it in your xcode project
* copy JSonny.h and JSonny.m into your xcode project
* thats it :)

## NOTICE: ##

* there is no support for pure int values, all of them must be converted to string, example: borderWidth => 7 must be borderWidth => '7', 
* if the initString contains UITableViewStyleGrouped, then the table style is grouped, otherwise its plain
* if no color is given, when color is expected -  [UIColor clearColor] is used

## examples: ##
	the example/ folder contains sinatra(www.sinatrarb.com) script to generate random rows
		(if you dont have sinatra get it and use it, its AWESOME: gem install sinatra)
		ruby sinatra-backend.rb -p 4567
		this will start a web server on port 4567 (check out http://127.0.0.1:4567)
	and then compile and run the example jsonny-example/xcode project

### simple 1 section 1 row table ###

	{
		"title":"simple table",
		"sections":
			[
				[
					{
						"didSelectRow":
							{
								"name":"JSonny",
								"init":
									{
										"method":"initWithString:",
										"argument":"http://localhost:4567/?UITableViewStyleGrouped"
									}
							},
						"heightForRow":"29",
						"editingStyleDelete":"http://127.0.0.1:9393/delete/5",						
						"detailTextLabel":"very simple text inside",
						"textLabel":
							{
								"textColor":
									{
										"blue":"117",
										"alpha":"1",
										"red":"154",
										"green":"166"
									},
								"text":"more detailed object UITableViewCellStyleValue1",	
								"font":	
									{
										"name":"AmericanTypewriter-Light",
										"size":"39"	
									}
							},
						"image":
							{
								"url":"https://www.google.com/intl/en_com/images/srpr/logo3w.png",
								"layer":
									{
										"borderColor":{"blue":"151","alpha":"1","red":"50","green":"150"},
										"borderWidth":"0","cornerRadius":"64","maskToBounds":"YES"
									}
							},
						"initWithStyle":"UITableViewCellStyleValue1",
						"backgroundColor":{"blue":"133","alpha":"1","red":"164","green":"85"}
					}
				]
			]
	}
									,
### root object: ###
	title => 'table's title'
	minRowHeight => 'minimal row height'
	sections => [array with each section's rows]

### row example: ###
	initWithStyle => ('UITableViewCellStyleValue1','UITableViewCellStyleValue2','UITableViewCellStyleSubtitle', none=UITableViewCellStyleDefault)
	backgroundColor => color-dictionary or color pattern image string
	image => 		
		{ 	
			'url' => 'https://www.google.com/intl/en_com/images/srpr/logo3w.png', 
			'layer' => { 	
						'maskToBounds' => 'YES',
						'cornerRadius' => '6.5',
						'borderWidth' => '7',
						'borderColor' => color-dictionary or color pattern image string
						}
	    } - or simple url string ( image => 'https://www.google.com/intl/en_com/images/srpr/logo3w.png' )
	textLabel|detailTextLabel =>		 
			{ 
				'text' => "label's text", 
				'font' => { 
							'name' => 'Trebuchet MS', 
							'size' => '30'
						  },
				'textColor' => color-dictionary or color pattern image string
			} - or textLabel.text string ( textLabel => 'just print this!' )
			
	heightForRow => '60' # height for current row
	editingStyleDelete => 'http://127.0.0.1:4567/delete/5' - url will be visited when user clicks the delete button
	didSelectRow => #when user clicks on the row
			{
				'name' => 'JSonny', # for security if class's name is not the same as the current clas, it must have prefix RemoteJsonRequestClass_
				'init' => { 
							'method' => 'initWithString:',
							'argument' => @request.url
						  }
			 }

	color-dictionary example:
		if the object is dictionary:
		{
			'red' => '255','green' => '255', 'blue' => '255', 'alpha' => '0.90'
		}

